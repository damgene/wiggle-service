[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "wiggle-service"
version = "0.1.0"
description = "Core API and database service for the Wiggle multi-exchange arbitrage system"
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.10"
authors = [
    {name = "Wiggle Team", email = "team@wiggle.dev"},
]
keywords = ["arbitrage", "crypto", "defi", "trading", "api"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Core API framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    
    # Database
    "motor>=3.3.0",  # Async MongoDB client
    "beanie>=1.23.0",  # Async ODM for MongoDB
    "pymongo>=4.6.0",  # MongoDB driver
    
    # Shared wiggle components
    "wiggle-common",
    
    # HTTP client
    "httpx>=0.25.0",
    "aiohttp>=3.9.0",
    
    # Background tasks and scheduling
    "celery>=5.3.0",
    "redis>=5.0.0",
    
    # Logging and monitoring
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0",
    
    # Utilities
    "python-multipart>=0.0.6",  # For file uploads
    "python-jose[cryptography]>=3.3.0",  # JWT tokens
    "passlib[bcrypt]>=1.7.4",  # Password hashing
    "tenacity>=8.2.0",  # Retry logic
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",  # For testing API endpoints
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
    "mongomock>=4.1.0",  # In-memory MongoDB for testing
]

monitoring = [
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
    "opentelemetry-instrumentation-pymongo>=0.42b0",
]

[project.urls]
Homepage = "https://github.com/wiggle/wiggle-service"
Documentation = "https://docs.wiggle.dev/service"
Repository = "https://github.com/wiggle/wiggle-service"
Issues = "https://github.com/wiggle/wiggle-service/issues"

[project.scripts]
wiggle-service = "wiggle_service.main:cli"

[tool.hatch.build.targets.wheel]
packages = ["src/wiggle_service"]

[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Exclude specific directories
  \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["wiggle_service", "wiggle_common"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["motor.*", "beanie.*", "celery.*", "redis.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=wiggle_service",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
    "mongodb: Tests requiring MongoDB",
    "redis: Tests requiring Redis",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src/wiggle_service"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/alembic/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]